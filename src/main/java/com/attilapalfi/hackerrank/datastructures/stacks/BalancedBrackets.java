package com.attilapalfi.hackerrank.datastructures.stacks;

import java.util.*;

public class BalancedBrackets {

    /*
     * Complete the 'isBalanced' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING s as parameter.
     */

    public static String isBalanced(String s) {
        Stack<Character> openingBrackets = new Stack<>();
        Map<Character, Character> bracketPairs = Map.of('}', '{', ')', '(', ']', '[');

        for (char c : s.toCharArray()) {
            if (isOpeningBracket(bracketPairs, c)) {
                openingBrackets.push(c);
            } else if (isClosingBracket(bracketPairs, c)) {
                if (openingBrackets.isEmpty()) {
                    return "NO";
                }
                char lastOpening = openingBrackets.pop();
                if (bracketPairs.get(c) != lastOpening) {
                    return "NO";
                }
            }
        }

        return openingBrackets.isEmpty() ? "YES" : "NO";
    }

    private static boolean isOpeningBracket(Map<Character, Character> bracketPairs, char c) {
        return bracketPairs.values().contains(c);
    }

    private static boolean isClosingBracket(Map<Character, Character> bracketPairs, char c) {
        return bracketPairs.keySet().contains(c);
    }


    public static String[] TEST_DATA = new String[]{
            "[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]",
            "[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}",
            "(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]",
            "){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]",
            "}(]}){",
            "((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{(",
            "{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())",
            "(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]",
            "()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])",
            "[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){][",
            "{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}",
            "()(){{}}[()()]{}{}",
            "{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])",
            "{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})",
            "][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{",
            "{{}(",
            "{[{((({}{({({()})()})[]({()[[][][]]}){}}))){}}]}{}{({((){{}[][]{}[][]{}}[{}])(())}[][])}",
            "()[[][()[]][]()](([[[(){()[[]](([]))}]]]))",
            "()[]({}{})(()){{{}}()()}({[]()}())[](){}(({()}[{}[{({{}}){({}){({})((({()})))}}}]]))",
            "}[{){({}({)})]([}{[}}{[(([])[(}){[]])([]]}(]]]]{][",
            "[{]{[{(){[}{}(([(]}])(){[[}(]){(})))}}{{)}}{}][({(}))]}({)",
            ")})[(]{][[())]{[]{{}}[)[)}[]){}](}({](}}}[}{({()]]",
            "[[[({[]}({[][[[[][[{(()[][])}()[][]][]{}]]]]}))][(()){}]]]()[{}([]{}){}{{}}]",
            "({[]({[]})}())[][{}[{{(({{{([{}])}}}))}}]]",
            "([((()))()])[][][]{}()(([]))[]()[]((){}[]){}(){{}[]}[[{[]}]]",
            "[[(((({}{[]{}()}){}{{}}){({[]{[{}]{(){}(((){()}))}()}}[[]]()()[()])[[{}{}]()]}))]]{}[]{}({({{}})})",
            "(]{()}((",
            "[][(())[({{{()[]}}{[[][[][[[]{{{[()]{{{{}{[]}[][]}}}}}}]]]]}})]]",
            "}[})})}[)]{}{)",
            "({(}{})))}(}[)[}{)}}[)[{][{(}{{}]({}{[(})[{[({{[}{(]]})}",
            "]}})[]))]{][])[}(])]({[]}[]([)",
            "[{{}{[{{[}[[}([]",
            "[([]){}][({})({[(([])[][])][[{}{([{{}{(()){{{({}{{}}())}}[]}}()[()[{{{([](()){[[[]]]})}}}]]}])}]]})]",
            "]{}{(}))}](})[{]]()(]([}]([}][}{]{[])}{{{]([][()){{})[{({{{[}{}](]}}",
            "{[{}}){(}[][)(}[}][)({[[{]}[(()[}}){}{)([)]}(()))]{)(}}}][",
            "(]{}{(}}}[)[",
            "[]{}{[[]]}([{}]{}[]){{(())}}",
            "[)([{(][(){)[)}{)]]}}([((][[}}(]{}]]}]][(({{{))[[){}{]][))[]{]][)[{{}{()]){)])))){{{[(]}[}}{}]",
            "{({(){[[[][]{}[[([]{})]{}]][[]()()]]}})}[{}{{}}]",
            ")}][(})){))[{}[}",
            "{[]{({]}[}}[{([([)([){{}{(}}[]}}[[{[}[[()(])[}[]",
            "()()()[]",
            "((){}])][]][}{]{)]]}][{]}[)(])[}[({(",
            ")[((])(]]]]((]){{{{())]}]}(}{([}(({}]])[[{){[}]{{}})[){(",
            "}][[{[((}{[]){}}[[[)({[)}]]}(]]{[)[]}{}(){}}][{()]))})]][(((}}",
            "([]){}{{}{}}()([([{}{[[]()([(([]()))()[[]]])]}])])",
            "[()[[]{{[]}()([])}[]][][]][]()[]{}{}[][]{}{}[()(){}]",
            "{[{){]({(((({](]{([])([{{([])[}(){(]](]{[{[]}}())[){})}))[{})))[",
            "{}[()[]][]{}{}[[{{[[({})]()[[()]]]}}]]",
            "{[{}[][]]}[((()))][]({})[]{}{()}",
            "(){[{({})}]}",
            "([]])][{)]({)[]))}]())[}]))][}{(}}})){]}]{[)}(][})[[",
            "((({{}(([{}(())]))[()]{[[[]()]]}})))",
            "}()))}(}]]{{})}][{](]][{]{[[]]]}]]}([)({([))[[(]}])}[}(([{)[)]]([[](]}]}{]{{})[]){]}{])(",
            "{}{}{}{[[()]][]}",
            ")]}]({{})[[[{]{{{}}][))]{{",
            "))){({}])}])}}]{)()(}(]}([",
            "([[]][])[[]()][]()(([[]]{[()[]{[][{}]}[()]]{}{[]}}{{}()}(()[([][]{})[[{}][]]{}[]])))",
            "(]{[({}[){)))}]{[{}][({[({[]))}[}]}{()(([]{]()}})}[]{[)](((]]])([]}}]){)(([]]}[[}[",
            "([[]])({}(([(){{}[{}]}]){[{}]}))[][{}{}](){}",
            "[][][][][][([])][]{({()}[[()()]{([(){[]{}}{(())}{[](){}()({}())}[({}[[]()])][]])}])}",
            "}[{{(}})}}(((())()({]{([]((][(({)[({[]]}[])}]{][{{}]{)][}(])}}}))}}}",
            "[]({})()[]{}{}[]({}{})[]{([])()[()][{()({})[{}{[[()]{}[]][]}(({{[]{()()()}{}[]()}[]}){{}{}})]}]}",
            "{{(([{)]{}({][{](){({([[[][)}[)})(",
            "[{}]{[()({[{}]})]}",
            "[[{}]]",
            "]{{({[{]}[[)]]}{}))}{){({]]}{]([)({{[]){)]{}){){}()})(]]{{])(])[]}][[()()}",
            "{[([}[[{{(]]][}()())]{){(){)]]){})}]{][][(}[]())[}[)})})[][{[)[})()][]))}[[}",
            "]()])}[}}}{]]{)[}(}]]])])}{(}{([{]({)]}])(})[{}[)]])]}[]{{)){}{()}]}((}}{({])[}])[]}",
            "(]}[{}{{][}))){{{([)([[])([]{[",
            "{(()[]){}}(){[]}({{}(()())})([]){}{}(())()[()]{}()",
            "{{}[{}[{}[]]]}{}({{[]}})[[(){}][]]{}(([]{[][]()()}{{{()()}{[]}({}[]{()})}{()}[[]][()]}))",
            "{[][]}[{}[](){}]{{}{[][{}]}}",
            "()(){}(){((){}[])([[]]())}",
            "{}[[{[((}[(}[[]{{]([(}]][[",
            "{}[([{[{{}()}]{}}([[{}[]]({}{{()}[][][]})])])]",
            "{[](}([)(])[]]})()]){[({]}{{{)({}(][{{[}}(]{",
            "[][]{{}[](())}{}({[()]}())[][[][({}([{}]))]]",
            "((()))[]{[(()({[()({[]}{})]}))]}{[]}{{({}{})[{}{}]{()([()])[{()}()[[]{}()]{}{}[]()]}[[]{[]}([])]}}"
    };

    public static String[] TEST_RESULTS = new String[]{
            "YES",
            "YES",
            "NO",
            "NO",
            "NO",
            "NO",
            "YES",
            "YES",
            "YES",
            "NO",
            "YES",
            "YES",
            "YES",
            "YES",
            "NO",
            "NO",
            "YES",
            "YES",
            "YES",
            "NO",
            "NO",
            "NO",
            "YES",
            "YES",
            "YES",
            "YES",
            "NO",
            "YES",
            "NO",
            "NO",
            "NO",
            "NO",
            "YES",
            "NO",
            "NO",
            "NO",
            "YES",
            "NO",
            "YES",
            "NO",
            "NO",
            "YES",
            "NO",
            "NO",
            "NO",
            "YES",
            "YES",
            "NO",
            "YES",
            "YES",
            "YES",
            "NO",
            "YES",
            "NO",
            "YES",
            "NO",
            "NO",
            "YES",
            "NO",
            "YES",
            "YES",
            "NO",
            "YES",
            "NO",
            "YES",
            "YES",
            "NO",
            "NO",
            "NO",
            "NO",
            "YES",
            "YES",
            "YES",
            "YES",
            "NO",
            "YES",
            "NO",
            "YES",
            "YES"
    };
}
